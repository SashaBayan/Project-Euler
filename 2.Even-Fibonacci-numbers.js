// Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

var evenFibNumbers = function(highestNum){
  //1) Produce the fib sequence up to 4 million (highestNum = 4000000)
    var fib = produceFib(highestNum);
  //2) Find the values in the sequence divisible by 2
    var evenFib = numsDivisbleByTwo(fib);
  //3) Sum those values
    var fibSum = sum(evenFib);
    return fibSum;
}

//evenFibNumbers(4000000) --> 4613732

////////////Helper Functions//////////////

var produceFib = function(highestNum){
  var fibSequence = [0, 1];
  var getNextNum = function(prevFib, currentFib){
    var lastIndex = fibSequence.length - 1;
    var nextNum = fibSequence[lastIndex - 1] + fibSequence[lastIndex];
    fibSequence.push(nextNum);
    if(fibSequence[lastIndex] < highestNum){
      lastIndex = fibSequence.length - 1;
      getNextNum(fibSequence[lastIndex - 1], fibSequence[lastIndex]);
    }
  };
  getNextNum(0, 1);
  return fibSequence
};

var numsDivisbleByTwo = function(arr){
  var result = [];
  for (var i = 0; i < arr.length; i++) {
    if(arr[i] % 2 === 0){
      result.push(arr[i])
    }
  };
  return result;
}

var sum = function(arr){
  //you could also use reduce with a sum function that doesn't iterate through an array
  var result = 0;
  for (var i = 0; i < arr.length; i++) {
    result += arr[i];
  };
  return result;
}

//Iterative solution to produceFib helper function 
// var produceFib = function(){
//   var fibSequence = [1,2,3];
//   var lastIndex = fibSequence.length - 1;
//   while(fibSequence[lastIndex] < 400000000){
//     var nextNum = fibSequence[lastIndex - 1] + fibSequence[lastIndex];
//     fibSequence.push(nextNum);
//   return fibSequence
// };

//TODO: Incorporate underscore's reduce method in helper functions